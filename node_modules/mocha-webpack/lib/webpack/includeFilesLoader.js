'use strict';

var _ReplaceSource = require('webpack-sources/lib/ReplaceSource');

var _ReplaceSource2 = _interopRequireDefault(_ReplaceSource);

var _SourceMapSource = require('webpack-sources/lib/SourceMapSource');

var _SourceMapSource2 = _interopRequireDefault(_SourceMapSource);

var _OriginalSource = require('webpack-sources/lib/OriginalSource');

var _OriginalSource2 = _interopRequireDefault(_OriginalSource);

var _loaderUtils = require('loader-utils');

var _loaderUtils2 = _interopRequireDefault(_loaderUtils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var useStrictRegex = /^(("|')use strict("|');)/;

// Note: no export default here cause of Babel 6
module.exports = function includeFilesLoader(sourceCode, sourceMap) {
  var _this = this;

  this.cacheable();

  var loaderOptions = _loaderUtils2.default.parseQuery(this.query);

  if (loaderOptions.include && loaderOptions.include.length) {
    var insertIndex = 0;
    var match = sourceCode.match(useStrictRegex);

    if (match !== null) {
      insertIndex = match.index + match[0].length;
    }

    var original = sourceMap ? new _SourceMapSource2.default(sourceCode, _loaderUtils2.default.getCurrentRequest(this), sourceMap) : new _OriginalSource2.default(sourceCode, _loaderUtils2.default.getCurrentRequest(this));

    var originalSource = original.source();
    var originalMap = original.map();

    var result = new _ReplaceSource2.default(original);

    var includes = loaderOptions.include.map(function (modPath) {
      return 'require(' + _loaderUtils2.default.stringifyRequest(_this, modPath) + ');';
    }).join('\n');

    result.insert(insertIndex, '\n' + includes);

    if (originalMap) {
      var source = new _SourceMapSource2.default(result.source(), _loaderUtils2.default.getCurrentRequest(this), result.map(), originalSource, originalMap);

      this.callback(null, source.source(), source.map());
      return;
    }

    this.callback(null, result.source());
    return;
  }

  this.callback(null, sourceCode, sourceMap);
};