'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ReplaceSource = require('webpack-sources/lib/ReplaceSource');

var _ReplaceSource2 = _interopRequireDefault(_ReplaceSource);

var _SourceMapSource = require('webpack-sources/lib/SourceMapSource');

var _SourceMapSource2 = _interopRequireDefault(_SourceMapSource);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function isBuilt(module) {
  return module.rawRequest && module.built;
}

function getId(module) {
  return module.rawRequest;
}

function setTrue(acc, key) {
  acc[key] = true; // eslint-disable-line no-param-reassign
  return acc;
}

function getAffectedFiles(modules) {
  return modules.filter(isBuilt).map(getId).reduce(setTrue, {});
}

function findAllDependentFiles(affectedFiles, seen, module) {
  if (seen[module.rawRequest]) return;
  seen[module.rawRequest] = true; // eslint-disable-line no-param-reassign

  if (affectedFiles[module.rawRequest]) return;
  if (!module.dependencies) return;
  if (!module.rawRequest) return;

  module.dependencies.forEach(function (dependency) {
    if (!dependency.module) return;

    findAllDependentFiles(affectedFiles, seen, dependency.module);
    if (affectedFiles[dependency.module.rawRequest]) {
      affectedFiles[module.rawRequest] = true; // eslint-disable-line no-param-reassign
    }
  });
}

var InjectChangedFilesPlugin = function () {
  function InjectChangedFilesPlugin() {
    var _this = this;

    _classCallCheck(this, InjectChangedFilesPlugin);

    this.testsCompleted = function (failed) {
      if (failed) {
        [].push.apply(_this.failedFiles, _this.hotFiles);
      } else {
        _this.failedFiles = [];
      }
    };

    this.failedFiles = [];
    this.hotFiles = [];
  }

  _createClass(InjectChangedFilesPlugin, [{
    key: 'apply',
    value: function apply(compiler) {
      var _this2 = this;

      compiler.plugin('this-compilation', function (compilation) {
        compilation.plugin('optimize-chunk-assets', function (chunks, callback) {
          chunks.forEach(function (chunk) {
            // find changed files
            var affectedFiles = getAffectedFiles(chunk.modules);
            chunk.modules.forEach(findAllDependentFiles.bind(null, affectedFiles, {}));
            _this2.hotFiles = Object.keys(affectedFiles);

            // and finally set changed files
            chunk.files.forEach(function (file) {
              if (!(chunk.isInitial ? chunk.isInitial() : chunk.initial)) {
                return;
              }
              _this2.setChangedFiles(compilation, file);
            });
          });
          callback();
        });
      });
    }
  }, {
    key: 'setChangedFiles',
    value: function setChangedFiles(compilation, file) {
      var original = compilation.assets[file];
      var originalSource = original.source();
      var originalMap = original.map();

      var result = new _ReplaceSource2.default(original);
      var regex = /__webpackManifest__\s*=\s*\[\s*\]/g;
      var files = this.hotFiles.concat(this.failedFiles);
      var changedFiles = '[\'' + files.join("', '") + '\']';
      var replacement = '__webpackManifest__ = ' + changedFiles;

      var match = void 0;
      while ((match = regex.exec(originalSource)) !== null) {
        // eslint-disable-line no-cond-assign
        var start = match.index;
        var end = match.index + (match[0].length - 1);
        result.replace(start, end, replacement);
      }

      var resultSource = result.source();
      var resultMap = result.map();

      compilation.assets[file] = new _SourceMapSource2.default( // eslint-disable-line no-param-reassign
      resultSource, file, resultMap, originalSource, originalMap);
    }
  }]);

  return InjectChangedFilesPlugin;
}();

exports.default = InjectChangedFilesPlugin;