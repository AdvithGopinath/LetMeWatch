'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.default = parseArgv;

var _yargs = require('yargs');

var _yargs2 = _interopRequireDefault(_yargs);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _package = require('../../package.json');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var BASIC_GROUP = 'Basic options:';
var OUTPUT_GROUP = 'Output options:';
var ADVANCED_GROUP = 'Advanced options:';

var options = {
  'async-only': {
    alias: 'A',
    type: 'boolean',
    describe: 'force all tests to take a callback (async) or return a promise',
    group: ADVANCED_GROUP
  },
  colors: {
    alias: 'c',
    type: 'boolean',
    default: undefined,
    describe: 'force enabling of colors',
    group: OUTPUT_GROUP
  },
  growl: {
    alias: 'G',
    type: 'boolean',
    describe: 'enable growl notification support',
    group: OUTPUT_GROUP
  },
  recursive: {
    type: 'boolean',
    describe: 'include sub directories',
    group: ADVANCED_GROUP
  },
  'reporter-options': {
    alias: 'O',
    type: 'string',
    describe: 'reporter-specific options, --reporter-options <k=v,k2=v2,...>',
    group: OUTPUT_GROUP,
    requiresArg: true
  },
  reporter: {
    alias: 'R',
    type: 'string',
    describe: 'specify the reporter to use',
    group: OUTPUT_GROUP,
    default: 'spec',
    requiresArg: true
  },
  bail: {
    alias: 'b',
    type: 'boolean',
    describe: 'bail after first test failure',
    group: ADVANCED_GROUP,
    default: false
  },
  glob: {
    type: 'string',
    describe: 'only run files matching <pattern> (only valid for directory entry)',
    group: ADVANCED_GROUP,
    requiresArg: true
  },
  grep: {
    alias: 'g',
    type: 'string',
    describe: 'only run tests matching <pattern>',
    group: ADVANCED_GROUP,
    requiresArg: true
  },
  fgrep: {
    alias: 'f',
    type: 'string',
    describe: 'only run tests containing <string>',
    group: ADVANCED_GROUP,
    requiresArg: true
  },
  invert: {
    alias: 'i',
    type: 'boolean',
    describe: 'inverts --grep and --fgrep matches',
    group: ADVANCED_GROUP,
    default: false
  },
  require: {
    alias: 'r',
    type: 'string',
    describe: 'require the given module',
    group: ADVANCED_GROUP,
    requiresArg: true,
    multiple: true
  },
  include: {
    type: 'string',
    describe: 'include the given module into test bundle',
    group: ADVANCED_GROUP,
    requiresArg: true,
    multiple: true
  },
  slow: {
    alias: 's',
    describe: '"slow" test threshold in milliseconds',
    group: ADVANCED_GROUP,
    default: 75,
    defaultDescription: '75 ms',
    requiresArg: true
  },
  timeout: {
    alias: 't',
    describe: 'set test-case timeout in milliseconds',
    group: ADVANCED_GROUP,
    default: 2000,
    defaultDescription: '2000 ms',
    requiresArg: true
  },
  ui: {
    alias: 'u',
    describe: 'specify user-interface',
    choices: ['bdd', 'tdd', 'exports', 'qunit'],
    group: BASIC_GROUP,
    default: 'bdd',
    requiresArg: true
  },
  watch: {
    alias: 'w',
    type: 'boolean',
    describe: 'watch files for changes',
    group: BASIC_GROUP,
    default: false
  },
  'check-leaks': {
    type: 'boolean',
    describe: 'check for global variable leaks',
    group: ADVANCED_GROUP,
    default: false
  },
  'full-trace': {
    type: 'boolean',
    describe: 'display the full stack trace',
    group: ADVANCED_GROUP,
    default: false
  },
  'inline-diffs': {
    type: 'boolean',
    describe: 'display actual/expected differences inline within each string',
    group: ADVANCED_GROUP,
    default: false
  },
  exit: {
    type: 'boolean',
    describe: 'require a clean shutdown of the event loop: mocha will not call process.exit',
    group: ADVANCED_GROUP,
    default: false
  },
  retries: {
    describe: 'set numbers of time to retry a failed test case',
    group: BASIC_GROUP,
    requiresArg: true
  },
  delay: {
    type: 'boolean',
    describe: 'wait for async suite definition',
    group: ADVANCED_GROUP,
    default: false
  },
  'webpack-config': {
    type: 'string',
    describe: 'path to webpack-config file',
    group: BASIC_GROUP,
    requiresArg: true
  },
  opts: {
    type: 'string',
    describe: 'path to webpack-mocha options file',
    group: BASIC_GROUP,
    requiresArg: true
  }
};

var paramList = function paramList(opts) {
  return _lodash2.default.map(_lodash2.default.keys(opts), _lodash2.default.camelCase);
};
var parameters = paramList(options); // camel case parameters
var parametersWithMultipleArgs = paramList(_lodash2.default.pickBy(_lodash2.default.mapValues(options, function (v) {
  return !!v.requiresArg && v.multiple === true;
}))); // eslint-disable-line max-len
var groupedAliases = _lodash2.default.values(_lodash2.default.mapValues(options, function (value, key) {
  return [_lodash2.default.camelCase(key), key, value.alias].filter(_lodash2.default.identity);
})); // eslint-disable-line max-len

function parseArgv(argv) {
  var ignoreDefaults = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

  var parsedArgs = (0, _yargs2.default)(argv).help('help').alias('help', 'h', '?').version(function () {
    return _package.version;
  }).demand(0, 1).options(options).strict().argv;

  var files = parsedArgs._;

  if (!files.length) {
    files = ['./test'];
  }

  var parsedOptions = _lodash2.default.pick(parsedArgs, parameters); // pick all parameters as new object
  var validOptions = _lodash2.default.omitBy(parsedOptions, _lodash2.default.isUndefined); // remove all undefined values

  _lodash2.default.forEach(parametersWithMultipleArgs, function (key) {
    if (_lodash2.default.has(validOptions, key)) {
      var value = validOptions[key];
      if (!Array.isArray(value)) {
        validOptions[key] = [value];
      }
    }
  });

  _lodash2.default.forOwn(validOptions, function (value, key) {
    // validate all non-array options with required arg that it is not duplicated
    // see https://github.com/yargs/yargs/issues/229
    if (parametersWithMultipleArgs.indexOf(key) === -1 && _lodash2.default.isArray(value)) {
      (function () {
        var arg = _lodash2.default.kebabCase(key);
        var provided = value.map(function (v) {
          return '--' + arg + ' ' + v;
        }).join(' ');
        var expected = '--' + arg + ' ' + value[0];

        throw new Error('Duplicating arguments for "--' + arg + '" is not allowed. "' + provided + '" was provided, but expected "' + expected + '"'); // eslint-disable-line max-len
      })();
    }
  });

  validOptions.files = files;

  var reporterOptions = {};

  if (validOptions.reporterOptions) {
    validOptions.reporterOptions.split(',').forEach(function (opt) {
      var L = opt.split('=');
      if (L.length > 2 || L.length === 0) {
        throw new Error('invalid reporter option ' + opt);
      } else if (L.length === 2) {
        reporterOptions[L[0]] = L[1];
      } else {
        reporterOptions[L[0]] = true;
      }
    });
  }

  validOptions.reporterOptions = reporterOptions;
  validOptions.require = validOptions.require || [];
  validOptions.include = validOptions.include || [];

  if (ignoreDefaults) {
    var _ret2 = function () {
      var userOptions = (0, _yargs2.default)(argv).argv;
      var providedKeys = _lodash2.default.keys(userOptions);
      var usedAliases = _lodash2.default.flatten(_lodash2.default.filter(groupedAliases, function (aliases) {
        return _lodash2.default.some(aliases, function (alias) {
          return providedKeys.indexOf(alias) !== -1;
        });
      }));

      if (parsedArgs._.length) {
        usedAliases.push('files');
      }

      return {
        v: _lodash2.default.pick(validOptions, usedAliases)
      };
    }();

    if ((typeof _ret2 === 'undefined' ? 'undefined' : _typeof(_ret2)) === "object") return _ret2.v;
  }

  return validOptions;
}