'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

exports.default = prepareWebpack;

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _normalizePath = require('normalize-path');

var _normalizePath2 = _interopRequireDefault(_normalizePath);

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

var _isGlob = require('is-glob');

var _isGlob2 = _interopRequireDefault(_isGlob);

var _globParent = require('glob-parent');

var _globParent2 = _interopRequireDefault(_globParent);

var _objectHash = require('object-hash');

var _objectHash2 = _interopRequireDefault(_objectHash);

var _anymatch = require('anymatch');

var _anymatch2 = _interopRequireDefault(_anymatch);

var _webpackInfoPlugin = require('webpack-info-plugin');

var _webpackInfoPlugin2 = _interopRequireDefault(_webpackInfoPlugin);

var _exists = require('../util/exists');

var _contextReplacementPlugin = require('../webpack/contextReplacementPlugin');

var _contextReplacementPlugin2 = _interopRequireDefault(_contextReplacementPlugin);

var _prepareEntry = require('../webpack/prepareEntry');

var _prepareEntry2 = _interopRequireDefault(_prepareEntry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var tmpPath = _path2.default.join(process.cwd(), '.tmp', 'mocha-webpack');

var entryLoader = require.resolve('../webpack/includeFilesLoader');

var defaultFilePattern = '*.js';

function directoryToGlob(directory, options) {
  var recursive = options.recursive;
  var glob = options.glob;


  var fileGlob = defaultFilePattern;

  if (glob) {
    if (!(0, _isGlob2.default)(glob)) {
      throw new Error('Provided Glob ' + glob + ' is not a valid glob pattern');
    }

    var parent = (0, _globParent2.default)(glob);

    if (parent !== '.' || glob.indexOf('**') !== -1) {
      throw new Error('Provided Glob ' + glob + ' must be a file pattern like *.js');
    }

    fileGlob = glob;
  }

  var normalizedPath = (0, _normalizePath2.default)(directory);
  var globstar = recursive ? '**/' : '';
  var filePattern = [globstar, fileGlob].join('');

  return normalizedPath + '/' + filePattern;
}

function createWebpackConfig(webpackConfig, entryFilePath, outputFilePath) {
  var plugins = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];
  var include = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];
  // eslint-disable-line max-len
  var entryFileName = _path2.default.basename(entryFilePath);
  var entryPath = _path2.default.dirname(entryFilePath);

  var outputFileName = _path2.default.basename(outputFilePath);
  var outputPath = _path2.default.dirname(outputFilePath);

  var config = _lodash2.default.clone(webpackConfig);
  config.entry = './' + entryFileName;

  if (include.length) {
    var query = {
      include: include
    };
    config.entry = entryLoader + '?' + JSON.stringify(query) + '!' + config.entry;
  }

  config.context = entryPath;
  config.output = _lodash2.default.extend({}, config.output, {
    filename: outputFileName,
    path: outputPath
  });

  config.plugins = (config.plugins || []).concat(plugins);
  return config;
}

function prepareWebpack(options, cb) {
  var _options$files = _slicedToArray(options.files, 1);

  var file = _options$files[0];

  var glob = (0, _isGlob2.default)(file);

  var webpackInfoPlugin = new _webpackInfoPlugin2.default({
    stats: {
      // pass options from http://webpack.github.io/docs/node.js-api.html#stats-tostring
      // context: false,
      hash: false,
      version: false,
      timings: false,
      assets: false,
      chunks: false,
      chunkModules: false,
      modules: false,
      children: false,
      cached: false,
      reasons: false,
      source: false,
      errorDetails: true,
      chunkOrigins: false,
      colors: options.colors
    },
    state: false });

  var webpackPlugins = [webpackInfoPlugin];

  if (glob || (0, _exists.existsDirSync)(file)) {
    (function () {
      var matchModule = function matchModule(mod) {
        // eslint-disable-line no-inner-declarations
        // normalize path to match glob
        var correctedPath = _path2.default.join(parent, mod);
        return matcher(correctedPath);
      };

      var globPattern = glob ? file : directoryToGlob(file, options);

      var matcher = (0, _anymatch2.default)(globPattern);
      var parent = (0, _globParent2.default)(globPattern);
      var directory = _path2.default.resolve(parent);

      var context = (0, _normalizePath2.default)(_path2.default.relative(tmpPath, directory));
      var recursive = globPattern.indexOf('**') !== -1; // or via options.recursive?

      var optionsHash = _objectHash2.default.MD5(options); // eslint-disable-line new-cap

      var entryFilePath = _path2.default.join(tmpPath, optionsHash + '-entry.js');
      var outputFilePath = _path2.default.join(tmpPath, optionsHash, optionsHash + '-output.js');

      webpackPlugins.push((0, _contextReplacementPlugin2.default)(context, matchModule, recursive));

      var webpackConfig = createWebpackConfig(options.webpackConfig, entryFilePath, outputFilePath, webpackPlugins, options.include);

      var fileContent = (0, _prepareEntry2.default)(context, options.watch);

      if (!(0, _exists.existsFileSync)(entryFilePath)) {
        _fsExtra2.default.outputFile(entryFilePath, fileContent, function (err) {
          cb(err, webpackConfig);
        });
      } else {
        process.nextTick(function () {
          cb(null, webpackConfig);
        });
      }
    })();
  } else if ((0, _exists.existsFileSync)(file)) {
    (function () {
      var entryFilePath = _path2.default.resolve(file);
      var outputFilePath = _path2.default.join(tmpPath, _path2.default.basename(entryFilePath));
      var webpackConfig = createWebpackConfig(options.webpackConfig, entryFilePath, outputFilePath, webpackPlugins, options.include);
      process.nextTick(function () {
        cb(null, webpackConfig);
      });
    })();
  } else {
    process.nextTick(function () {
      cb(new Error('File/Directory not found: ' + file));
    });
  }
}