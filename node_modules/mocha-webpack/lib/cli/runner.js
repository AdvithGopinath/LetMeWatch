'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.run = run;
exports.watch = watch;

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _build = require('../webpack/build');

var _build2 = _interopRequireDefault(_build);

var _watch = require('../webpack/watch');

var _watch2 = _interopRequireDefault(_watch);

var _InjectChangedFilesPlugin = require('../webpack/InjectChangedFilesPlugin');

var _InjectChangedFilesPlugin2 = _interopRequireDefault(_InjectChangedFilesPlugin);

var _configureMocha = require('../mocha/configureMocha');

var _configureMocha2 = _interopRequireDefault(_configureMocha);

var _resetMocha = require('../mocha/resetMocha');

var _resetMocha2 = _interopRequireDefault(_resetMocha);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function exitLater(code) {
  process.on('exit', function () {
    process.exit(code);
  });
}

function exit(code) {
  process.exit(code);
}

function run(options, webpackConfig) {
  var mocha = (0, _configureMocha2.default)(options);
  var outputFilePath = _path2.default.join(webpackConfig.output.path, webpackConfig.output.filename);

  (0, _build2.default)(webpackConfig, function (err) {
    if (err) {
      if (options.exit) {
        exit(1);
      } else {
        exitLater(1);
      }
    }

    mocha.files = [outputFilePath];
    mocha.run(options.exit ? exit : exitLater);
  });
}

function watch(options, webpackConfig) {
  var mocha = (0, _configureMocha2.default)(options);

  var outputFilePath = _path2.default.join(webpackConfig.output.path, webpackConfig.output.filename);

  var injectChangedFilesPlugin = new _InjectChangedFilesPlugin2.default();

  webpackConfig.plugins.push(injectChangedFilesPlugin);

  var runAgain = false;
  var mochaRunner = null;

  function runMocha() {
    // eslint-disable-line no-inner-declarations
    // clear up require cache to reload test bundle
    delete require.cache[outputFilePath];

    (0, _resetMocha2.default)(mocha, options);
    mocha.files = [outputFilePath];

    runAgain = false;

    try {
      mochaRunner = mocha.run(function (failures) {
        injectChangedFilesPlugin.testsCompleted(failures > 0);

        // need to wait until next tick, otherwise mochaRunner = null doesn't work..
        process.nextTick(function () {
          mochaRunner = null;
          if (runAgain) {
            runMocha();
          }
        });
      });
    } catch (e) {
      injectChangedFilesPlugin.testsCompleted(true);
      console.error(e.stack); // eslint-disable-line no-console
    }
  }

  (0, _watch2.default)(webpackConfig, function (err) {
    if (err) {
      // wait for fixed tests
      return;
    }

    runAgain = true;

    if (mochaRunner) {
      mochaRunner.abort();
    } else {
      runMocha();
    }
  });
}